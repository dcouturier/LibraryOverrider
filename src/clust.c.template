#define _GNU_SOURCE

#include <dlfcn.h>
#include <stdlib.h>
#include <stdio.h>
#include "clust.h"
#include <time.h>

#define TRACEPOINT_DEFINE
#define TRACEPOINT_CREATE_PROBES
#include "clust_tp.h"

#ifdef __cplusplus
"C" {
#endif


cl_int ev_delete = 1;
cl_int ev_keep = 0;

[[[reallibdefines]]]

void* dlSymFunction(void* libPtr, const char* functionName) {
	void* ptr;
	*(void**)(&ptr) = dlsym(libPtr, functionName);
	if(!ptr) {
		fprintf(stderr, "%s: Unable to load %s\n", LIB_NAME, functionName);
		exit(EXIT_FAILURE);
	}
	return ptr;
}

__attribute__((constructor)) void libCLUST() {
	void* libcl_ptr;
	dlerror();
	libcl_ptr = dlopen(LIBCL_NAME, RTLD_LAZY);

	if(!libcl_ptr) {
		fprintf(stderr, "%s: Unable to load %s\n", LIB_NAME, LIBCL_NAME);
		exit(EXIT_FAILURE);
	}
	dlerror();
	
[[[reallibdlsym]]]
}


const char* getCommandNameFromCommandID(cl_command_type command) {

	switch(command) {
	case CL_COMMAND_NDRANGE_KERNEL:
		return "CL_COMMAND_NDRANGE_KERNEL";
		break;
	case CL_COMMAND_TASK:
		return "CL_COMMAND_TASK";
		break;
	case CL_COMMAND_NATIVE_KERNEL:
		return "CL_COMMAND_NATIVE_KERNEL";
		break;
	case CL_COMMAND_READ_BUFFER:
		return "CL_COMMAND_READ_BUFFER";
		break;
	case CL_COMMAND_WRITE_BUFFER:
		return "CL_COMMAND_WRITE_BUFFER";
		break;
	case CL_COMMAND_COPY_BUFFER:
		return "CL_COMMAND_COPY_BUFFER";
		break;
	case CL_COMMAND_READ_IMAGE:
		return "CL_COMMAND_READ_IMAGE";
		break;
	case CL_COMMAND_WRITE_IMAGE:
		return "CL_COMMAND_WRITE_IMAGE";
		break;
	case CL_COMMAND_COPY_IMAGE:
		return "CL_COMMAND_COPY_IMAGE";
		break;
	case CL_COMMAND_COPY_BUFFER_TO_IMAGE:
		return "CL_COMMAND_COPY_BUFFER_TO_IMAGE";
		break;
	case CL_COMMAND_MAP_BUFFER:
		return "CL_COMMAND_MAP_BUFFER";
		break;
	case CL_COMMAND_MAP_IMAGE:
		return "CL_COMMAND_MAP_IMAGE";
		break;
	case CL_COMMAND_UNMAP_MEM_OBJECT:
		return "CL_COMMAND_UNMAP_MEM_OBJECT";
		break;
	case CL_COMMAND_MARKER:
		return "CL_COMMAND_MARKER";
		break;
	case CL_COMMAND_ACQUIRE_GL_OBJECTS:
		return "CL_COMMAND_ACQUIRE_GL_OBJECTS";
		break;
	case CL_COMMAND_RELEASE_GL_OBJECTS:
		return "CL_COMMAND_RELEASE_GL_OBJECTS";
		break;
	case CL_COMMAND_READ_BUFFER_RECT:
		return "CL_COMMAND_READ_BUFFER_RECT";
		break;
	case CL_COMMAND_WRITE_BUFFER_RECT:
		return "CL_COMMAND_WRITE_BUFFER_RECT";
		break;
	case CL_COMMAND_COPY_BUFFER_RECT:
		return "CL_COMMAND_COPY_BUFFER_RECT";
		break;
	case CL_COMMAND_USER:
		return "CL_COMMAND_USER";
		break;
#ifdef cl_khr_gl_event
	case CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR :
		return "CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR";
		break;
#endif
#ifdef cl_khr_d3d10_sharing
	case CL_COMMAND_ACQUIRE_D3D10_OBJECTS_KHR :
		return "CL_COMMAND_ACQUIRE_D3D10_OBJECTS_KHR";
		break;
	case CL_COMMAND_RELEASE_D3D10_OBJECTS_KHR :
		return "CL_COMMAND_RELEASE_D3D10_OBJECTS_KHR";
		break;
#endif
	}
	return "ERROR: Unknown event type";
}

void CL_CALLBACK eventCompleted(cl_event event, cl_int cmd_exec_status, void *user_data)
{
	cl_int * releaseEvent = (cl_int*) user_data;
	cl_ulong start = 0;
	cl_ulong end = 0;
	cl_ulong queued = 0;
	cl_ulong submit = 0;
	cl_command_type command;
	cl_command_queue queue;

	// Get event start time
	cl_int ret = reallib_clGetEventProfilingInfo(event, CL_PROFILING_COMMAND_START, sizeof(cl_ulong), &start, NULL);
	if(ret != CL_SUCCESS) fprintf(stderr, "CLUST::eventCompleted:error->CL_PROFILING_COMMAND_START returned %d\n", ret);
	// Get event end time
	ret = reallib_clGetEventProfilingInfo(event, CL_PROFILING_COMMAND_END, sizeof(cl_ulong), &end, NULL);
	if(ret != CL_SUCCESS) fprintf(stderr, "CLUST::eventCompleted:error->CL_PROFILING_COMMAND_END returned %d\n", ret);
	// Get event enqueue time
	ret = reallib_clGetEventProfilingInfo(event, CL_PROFILING_COMMAND_QUEUED, sizeof(cl_ulong), &queued, NULL);
	if(ret != CL_SUCCESS) fprintf(stderr, "CLUST::eventCompleted:error->CL_PROFILING_COMMAND_QUEUED returned %d\n", ret);
	// Get event submit time
	ret = reallib_clGetEventProfilingInfo(event, CL_PROFILING_COMMAND_SUBMIT, sizeof(cl_ulong), &submit, NULL);
	if(ret != CL_SUCCESS) fprintf(stderr, "CLUST::eventCompleted:error->CL_PROFILING_COMMAND_SUBMIT returned %d\n", ret);
	// Get event command name (CL_COMMAND_NDRANGE_KERNEL, CL_COMMAND_WRITE_BUFFER, ...)
	ret = reallib_clGetEventInfo(event,CL_EVENT_COMMAND_TYPE,sizeof(cl_command_type), &command, NULL);
	if(ret != CL_SUCCESS) fprintf(stderr, "CLUST::eventCompleted:error->CL_EVENT_COMMAND_TYPE returned %d\n", ret);
	// Get event queue id
	ret = reallib_clGetEventInfo(event,CL_EVENT_COMMAND_QUEUE,sizeof(cl_command_queue), &queue, NULL);
	if(ret != CL_SUCCESS) fprintf(stderr, "CLUST::eventCompleted:error->CL_EVENT_COMMAND_QUEUE returned %d\n", ret);
	// Record with UST tracepoint
	tracepoint(clust_provider, clust_device_event, (ulong)queue, command, queued, submit, start, end);
#ifdef __DEBUG__
	struct timespec ts;
	clock_gettime(CLOCK_MONOTONIC, &ts);

	const char* command_name_str = getCommandNameFromCommandID(command);

	fprintf(stdout, "CLUST::eventCompleted: \n"
						"\tName: %s\n"
						"\tStart:\t%ld ns\n"
						"\tEnd:\t%ld ns\n"
						"\tDuration:\t%ld ns\n"
						"\tQueueID: %p\n"
						"\tCommandID: %d\n"
						"\tCPU's Monotonic clock: %lu\n",
						command_name_str, start,end,(end-start),queue,command,ts.tv_nsec+(ts.tv_sec*1000000000));
#endif
	if(*releaseEvent == ev_delete) {
#ifdef __DEBUG__
		fprintf(stdout, "CLUST::eventCompleted: Dynamically releasing Event...\n");
#endif
		reallib_clReleaseEvent(event);
	}
}
	

[[[functions]]]

#ifdef __cplusplus
}
#endif
